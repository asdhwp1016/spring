<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" scope="singleton">
		<constructor-arg index ="0" ref="apple"></constructor-arg>
		<constructor-arg index ="1" value="270000"></constructor-arg>
	</bean> -->
	
	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod" scope="singleton">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="270000"></property>
	</bean>
 -->
 	<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="29000">
 	</bean>
 
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>

	<bean id="apple" class="polymorphism.AppleSpeaker"></bean>


	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
			<list>
				<value>서울시 강북구 중화동</value>
				<value>서울시 강남구 역삼동</value>
			</list>
			
			<set value-type="java.lang.String">
				<value>서울시 강북구 중화동</value>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 강북구 중화동</value>
			</set>
			
			<map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강북구 중화동</value>
				</entry>
				
				<entry>
					<key><value>마이콜고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
			</map>
			
			<props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">충북 청주시 사창동</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- <context:component-scan base-package="polymorphism"></context:component-scan>
	<bean class="polymorphism.SonySpeaker"></bean> -->

<!--  <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
			<property name="userDAO" ref="userDAO"></property>
		</bean>

		<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO"></bean> 
		 -->
		
		

		
	<!--  	

		<bean id="log" class="com.springbook.biz.common.Log4Advice"/>
   
   		<aop:config>
      		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
      
		    <aop:pointcut expression="execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
      		
      		<aop:aspect ref="log">
         	<aop:after method="printLogging" pointcut-ref="getPointcut"/>
      		</aop:aspect>
      
   </aop:config>
		
		<bean id="before" class="com.springbook.biz.common.BeforeAdvice"/>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
			
			<aop:aspect ref="before">
				<aop:before method="beforeLog" pointcut-ref="allPointcut"/>
			</aop:aspect>
		</aop:config>
		
		
		 <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"/>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
			
			<aop:aspect ref="afterReturning">
				<aop:after-returning method="afterLog" pointcut-ref="allPointcut" returning="returnObj"/>
			</aop:aspect>
		</aop:config>
		
		
		 <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"/>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
			
			<aop:aspect ref="afterThrowing">
				<aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut" throwing="exceptObj"/>
			</aop:aspect>
		</aop:config>
		  
		<bean id="after" class="com.springbook.biz.common.AfterAdvice"/>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
			
			<aop:aspect ref="after">
				<aop:after method="finallyLog" pointcut-ref="allPointcut"/>
			</aop:aspect>
		</aop:config>
		
		
	<bean id="around" class="com.springbook.biz.common.AroundAdvice"/>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
			
			<aop:aspect ref="around">
				<aop:around method="arroundLog" pointcut-ref="allPointcut"/>
			</aop:aspect>
		</aop:config>   -->
		
		<!-- <context:component-scan base-package="com.springbook.biz"></context:component-scan>
		
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
		
		<context:component-scan base-package="com.springbook.biz"></context:component-scan>
		
		
		<context:property-placeholder location="classpath:config/database.properties"/>
		<!-- DataSource 설정 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
		
		</bean>
		
		<!-- Spring JDBC -->
		<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<!-- Transaction 설정 -->
		<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
		</bean>
		
		<tx:advice id="txAdvice" transaction-manager="txManager">
			<tx:attributes>
				<tx:method name="get" read-only="true"/>
				<tx:method name="*"/>
			</tx:attributes>
		</tx:advice>
		
		<aop:config>
			<aop:pointcut expression="execution(* com.springbook.biz..*(..))" id="txPointcut"/>
			<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
		</aop:config>
</beans>
